The ``7-base_geometry`` module
===============================

Using the ``BaseGeometry`` class
---------------------------------

This is a test file for the ``BaseGeometry`` class defined in the
``7-base_geometry`` module. It tests the ``area()`` method and the
``integer_validator(self, name, value)`` method.

First:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create a instance of BaseGeometry:
    >>> bg = BaseGeometry()

Test the area() method (which should raise an Exception):
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Test the integer_validator() method:

Value is positive (no exception should be raised)
    >>> bg.integer_validator("positive", 1)

Value is less than or equal to 0 (should raise a ValueError)
    >>> bg.integer_validator("zero", 0)
    Traceback (most recent call last):
    ...
    ValueError: zero must be greater than 0

    >>> bg.integer_validator("negative", -1)
    Traceback (most recent call last):
    ...
    ValueError: negative must be greater than 0

Value is not an integer (should raise a TypeError)
    >>> bg.integer_validator("string", "hello")
    Traceback (most recent call last):
    ...
    TypeError: string must be an integer

    >>> bg.integer_validator("none", None)
    Traceback (most recent call last):
    ...
    TypeError: none must be an integer

Incorrect usage of integer_validator (should raise a TypeError)
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
    >>> bg.integer_validator("only_name")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'