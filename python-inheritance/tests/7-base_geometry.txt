Test the integer_validator method of BaseGeometry
==================================================
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test case 1: Valid integer
>>> bg.integer_validator("<name>", 1)

# Test case 2: Zero value
>>> bg.integer_validator("<name>", 0)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

# Test case 3: Negative integer
>>> bg.integer_validator("<name>", -5)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

# Test case 4: Non-integer value (float)
>>> bg.integer_validator("<name>", 3.5)
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 5: Non-integer value (string)
>>> bg.integer_validator("<name>", "string")
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 6: Non-integer value (list)
>>> bg.integer_validator("<name>", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 7: Non-integer value (None)
>>> bg.integer_validator("<name>", None)
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 8: Non-integer value (dict)
>>> bg.integer_validator("<name>", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 9: Non-integer value (tuple)
>>> bg.integer_validator("<name>", (1, 2))
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

# Test case 10: Non-integer value (set)
>>> bg.integer_validator("<name>", {1, 2})
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer
