The ``7-base_geometry`` module
===============================

Using the ``BaseGeometry`` class
---------------------------------

This is a test file for the ``BaseGeometry`` class defined in the
``7-base_geometry`` module. It tests the ``area()`` method and the
``integer_validator(self, name, value)`` method.

First:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create a instance of BaseGeometry:
    >>> bg = BaseGeometry()

Test the area() method (which should raise an Exception):
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Test the integer_validator() method:

Value is positive (no exception should be raised)
    >>> bg.integer_validator("positive", 1)

Value is less than or equal to 0 (should raise a ValueError)
    >>> bg.integer_validator("zero", 0)
    Traceback (most recent call last):
    ...
    ValueError: zero must be greater than 0

    >>> bg.integer_validator("negative", -1)
    Traceback (most recent call last):
    ...
    ValueError: negative must be greater than 0

Value is non-integer (should raise a TypeError)
    >>> bg.integer_validator("string", "hello")
    Traceback (most recent call last):
    ...
    TypeError: string must be an integer

    >>> bg.integer_validator("float", 3.14)
    Traceback (most recent call last):
    ...
    TypeError: float must be an integer

    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
    ...
    TypeError: list must be an integer

    >>> bg.integer_validator("dict", {"a": 1})
    Traceback (most recent call last):
    ...
    TypeError: dict must be an integer

    >>> bg.integer_validator("set", {1, 2})
    Traceback (most recent call last):
    ...
    TypeError: set must be an integer

    >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
    ...
    TypeError: tuple must be an integer
    >>> bg.integer_validator("None", None)
    Traceback (most recent call last):
    ...
    TypeError: None must be an integer

    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
    ...
    TypeError: bool must be an integer

    >>> bg.integer_validator("bool", False)
    Traceback (most recent call last):
    ...
    TypeError: bool must be an integer

    >>> bg.integer_validator("complex", 1 + 2j)
    Traceback (most recent call last):
    ...
    TypeError: complex must be an integer

    >>> bg.integer_validator("bytes", b'byte')
    Traceback (most recent call last):
    ...
    TypeError: bytes must be an integer

    >>> bg.integer_validator("bytearray", bytearray(b'byte'))
    Traceback (most recent call last):
    ...
    TypeError: bytearray must be an integer
    
    >>> bg.integer_validator("frozenset", frozenset([1, 2, 3]))
    Traceback (most recent call last):
    ...
    TypeError: frozenset must be an integer